// Copyright (C) 2020 Intel Corporation
// Licensed subject to the terms of the separately executed evaluation license agreement between Intel Corporation and you.
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "federation.proto";


// Envoy Messages

message NodeInfo {
    string name = 1;
    string adress = 2;
    bool cuda_available = 3;
    uint32 memory_size = 4;
}

message ShardInfo {
    NodeInfo node_info = 1;
    string shard_description = 2;
    uint64 n_samples = 3;
    // We just pass numpy shapes
    repeated string sample_shape = 4;
    repeated string target_shape = 5;
}

message ShardAcknowledgement {
    bool accepted = 1;
}

message WaitExperimentRequest {
    string collaborator_name = 1;
}

message WaitExperimentResponse {
    string experiment_name = 1;
}

message GetExperimentDataRequest {
    string experiment_name = 1;
    string collaborator_name = 2;
}

message ExperimentData {
    uint32 size = 1; // size, in bytes, of the data sent in npbytes
	bytes npbytes = 2; //actual data
}

// API Messages

message ExperimentInfo {
    string name = 2;
    repeated string collaborator_names = 3;
    ExperimentData experiment_data = 4;
    ModelProto model_proto = 5;
}

message SetNewExperimentResponse{
    bool accepted = 1;
    string tensorboard_address = 2;
}

message GetTrainedModelRequest {
    enum ModelType {
        BEST_MODEL = 0;
        LAST_MODEL = 1;
    }
    string experiment_name = 2;
    ModelType model_type = 3;
}

message TrainedModelResponse {
    ModelProto model_proto = 1;
}

message GetDatasetInfoRequest {}

message StreamMetricsRequest {
    string experiment_name = 2;
}

message StreamMetricsResponse {
    string metric_origin = 1;
    string task_name = 2;
    string metric_name = 3;
    float metric_value = 4;
    uint32 round = 5;
}

message RemoveExperimentRequest {
    string experiment_name = 2;
}

message RemoveExperimentResponse {
    bool acknowledgement = 1;
}

message CollaboratorStatus {
    string name = 1;
    bool is_experiment_running = 2;
}

message CollaboratorHealthCheckResponse {
    google.protobuf.Duration health_check_period = 1;
}

message EnvoyInfo {
    ShardInfo shard_info = 1;
    bool is_online = 2;
    bool is_experiment_running = 3;
    google.protobuf.Timestamp last_updated = 4;
    google.protobuf.Duration valid_duration = 5;
}

message GetEnvoysRequest {}

message GetEnvoysResponse {
    repeated EnvoyInfo envoy_infos = 1;
}

service FederationDirector {
    // Envoy RPCs
    rpc AcknowledgeShard (ShardInfo) returns (ShardAcknowledgement) {}
    // Shard owner could also provide some public data for tests
    rpc WaitExperiment (stream WaitExperimentRequest) returns (stream WaitExperimentResponse) {}
    rpc GetExperimentData (GetExperimentDataRequest) returns (stream ExperimentData) {}

    // API RPCs
    rpc SetNewExperiment (stream ExperimentInfo) returns (SetNewExperimentResponse) {}
    rpc GetDatasetInfo (GetDatasetInfoRequest) returns (ShardInfo) {}
    rpc GetTrainedModel (GetTrainedModelRequest) returns (TrainedModelResponse) {}
    rpc StreamMetrics (StreamMetricsRequest) returns (stream StreamMetricsResponse) {}
    rpc RemoveExperimentData (RemoveExperimentRequest) returns (RemoveExperimentResponse) {}
    rpc CollaboratorHealthCheck (CollaboratorStatus) returns (CollaboratorHealthCheckResponse) {}
    rpc GetEnvoys (GetEnvoysRequest) returns (GetEnvoysResponse) {}
}

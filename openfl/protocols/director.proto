// Copyright (C) 2020-2021 Intel Corporation
// Licensed subject to the terms of the separately executed evaluation license agreement between Intel Corporation and you.

syntax = "proto3";

package openfl.director;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "openfl/protocols/base.proto";

service Director {
  // 1. Envoy RPCs
  rpc UpdateShardInfo(UpdateShardInfoRequest) returns (UpdateShardInfoResponse) {}
  // Shard owner could also provide some public data for tests
  rpc WaitExperiment(stream WaitExperimentRequest) returns (stream WaitExperimentResponse) {}
  rpc GetExperimentData(GetExperimentDataRequest) returns (stream ExperimentData) {}
  rpc UpdateEnvoyStatus(UpdateEnvoyStatusRequest) returns (UpdateEnvoyStatusResponse) {}
  rpc SetExperimentFailed (SetExperimentFailedRequest) returns (SetExperimentFailedResponse) {}

  // 2. Frontend RPCs
  // 2.1 Extension RPCs
  rpc GetExperimentDescription(GetExperimentDescriptionRequest)
    returns (GetExperimentDescriptionResponse) {}
  rpc GetExperimentsList(GetExperimentsListRequest) returns (GetExperimentsListResponse){}

  // 2.2 API RPCs
  rpc SetNewExperiment(stream ExperimentInfo) returns (SetNewExperimentResponse) {}
  rpc GetDatasetInfo(GetDatasetInfoRequest) returns (GetDatasetInfoResponse) {}
  rpc GetTrainedModel(GetTrainedModelRequest) returns (TrainedModelResponse) {}
  rpc GetMetricStream(GetMetricStreamRequest) returns (stream GetMetricStreamResponse) {}
  rpc RemoveExperimentData(RemoveExperimentRequest) returns (RemoveExperimentResponse) {}
  rpc GetEnvoys(GetEnvoysRequest) returns (GetEnvoysResponse) {}
}

message CudaDeviceInfo {
  uint64 index = 1;
  uint64 memory_total = 2;
  uint64 memory_utilized = 3;
  string device_utilization = 4;
  string cuda_driver_version = 5;
  string cuda_version = 6;
  string name = 7;
}

// Envoy Messages

message NodeInfo {
  string name = 1;
  repeated CudaDeviceInfo cuda_devices = 2;
}

message ShardInfo {
  NodeInfo node_info = 1;
  string shard_description = 2;
  uint64 n_samples = 3;
  // We just pass numpy shapes
  repeated string sample_shape = 4;
  repeated string target_shape = 5;
}

message UpdateShardInfoRequest {
  ShardInfo shard_info = 1;
}

message UpdateShardInfoResponse {
  bool accepted = 1;
}

message WaitExperimentRequest {
  string collaborator_name = 1;
}

message WaitExperimentResponse {
  string experiment_name = 1;
}

message GetExperimentDataRequest {
  string experiment_name = 1;
  string collaborator_name = 2;
}

message ExperimentData {
  uint32 size = 1; // size, in bytes, of the data sent in npbytes
  bytes npbytes = 2; //actual data
}

message UpdateEnvoyStatusRequest {
  string name = 1;
  bool is_experiment_running = 2;
  repeated CudaDeviceInfo cuda_devices = 3;
}

message UpdateEnvoyStatusResponse {
  google.protobuf.Duration health_check_period = 1;
}

message SetExperimentFailedRequest {
  string experiment_name = 1;
  string collaborator_name = 2;
  uint32 error_code = 3;
  string error_description = 4;
}

message SetExperimentFailedResponse {}

// Frontend. Extension Messages.

message GetExperimentsListRequest {}

message ExperimentListItem {
  string name = 1;
  string status = 2;
  uint32 collaborators_amount = 3;
  uint32 tasks_amount = 4;
  float progress = 5;
}

message GetExperimentsListResponse {
  repeated ExperimentListItem experiments = 1;
}

message GetExperimentDescriptionRequest {
  string name = 1;
}

message GetExperimentDescriptionResponse {
  ExperimentDescription experiment = 1;
}

// Frontend. API Messages

message ExperimentInfo {
  string name = 1;
  repeated string collaborator_names = 2;
  ExperimentData experiment_data = 3;
  ModelProto model_proto = 4;
}

message SetNewExperimentResponse{
  bool accepted = 1;
}

message GetTrainedModelRequest {
  enum ModelType {
    BEST_MODEL = 0;
    LAST_MODEL = 1;
  }
  string experiment_name = 2;
  ModelType model_type = 3;
}

message TrainedModelResponse {
  ModelProto model_proto = 1;
}

message GetDatasetInfoRequest {}

message GetDatasetInfoResponse {
  ShardInfo shard_info = 1;
}

message GetMetricStreamRequest {
  string experiment_name = 1;
}

message GetMetricStreamResponse {
  string metric_origin = 1;
  string task_name = 2;
  string metric_name = 3;
  float metric_value = 4;
  uint32 round = 5;
}

message RemoveExperimentRequest {
  string experiment_name = 1;
}

message RemoveExperimentResponse {
  bool acknowledgement = 1;
}

message EnvoyInfo {
  ShardInfo shard_info = 1;
  bool is_online = 2;
  bool is_experiment_running = 3;
  google.protobuf.Timestamp last_updated = 4;
  google.protobuf.Duration valid_duration = 5;
  string experiment_name = 6;
}

message GetEnvoysRequest {}

message GetEnvoysResponse {
  repeated EnvoyInfo envoy_infos = 1;
}

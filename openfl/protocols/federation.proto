// Copyright (C) 2020 Intel Corporation
// Licensed subject to the terms of the separately executed evaluation license agreement between Intel Corporation and you.
syntax = "proto2";

service Aggregator {
    rpc GetTasks(TasksRequest)                  returns (TasksResponse) {}
    rpc GetAggregatedTensor(TensorRequest)      returns (TensorResponse) {}
    rpc SendLocalTaskResults(stream DataStream) returns (Acknowledgement) {}
}

// handles large size data
message DataStream {
	required uint32 size    = 1; // size, in bytes, of the data sent in npbytes
	required bytes  npbytes = 2; //actual data
}

message MessageHeader {
    required string sender                      = 1;
    required string receiver                    = 2;
    required string federation_uuid             = 3;
    required string single_col_cert_common_name = 4;
}

message TasksRequest {
    required MessageHeader header = 1;
}

message TasksResponse {
    required MessageHeader  header       = 1;
    required int32          round_number = 2;
    repeated string         tasks        = 3;  // these next three are exclusive. Oneof is probably a good idea
    required int32          sleep_time   = 4;  // these three are exclusive
    required bool           quit         = 5;  // these three are exclusive
}

message TensorRequest {
    required MessageHeader   header           = 1;
    required string          tensor_name      = 2;
    required int32           round_number     = 3;
    required bool            report	          = 4;
    repeated string	         tags	          = 5;
    required bool	         require_lossless = 6;
}

// we'll actually send this as a data stream
message TensorResponse {
    required MessageHeader   header          = 1;
    required int32           round_number    = 2;
    required NamedTensor     tensor          = 3;
}

// This is only needed to initializing the model weights on the aggregator
message ModelProto {
    repeated NamedTensor    tensors         = 1;
}

// we'll actually send this as a data stream
message TaskResults {
    required MessageHeader  header          = 1;
    required int32          round_number    = 2;
    required string         task_name       = 3;
    required int32	        data_size       = 4;
    repeated NamedTensor    tensors         = 5;    
}

message Acknowledgement {
    required MessageHeader header = 1;
}

message NamedTensor {
    required string         name                 = 1;
    required int32          round_number         = 2;
    required bool           lossless		     = 3;
    required bool	        report		         = 4;
    repeated string         tags                 = 5;
    repeated MetadataProto  transformer_metadata = 6;
    required bytes          data_bytes           = 7;
}

message MetadataProto {
    map<int32, float>   int_to_float    = 1;
    repeated int32      int_list        = 2;
    repeated bool       bool_list       = 3;
}
